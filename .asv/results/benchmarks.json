{
    "example_benchmarks.MemSuite.mem_list": {
        "code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256",
        "name": "example_benchmarks.MemSuite.mem_list",
        "param_names": [],
        "params": [],
        "type": "memory",
        "unit": "bytes",
        "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"
    },
    "example_benchmarks.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "example_benchmarks.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "example_benchmarks.TimeSuite.time_range": {
        "code": "class TimeSuite:\n    def time_range(self):\n        d = self.d\n        for key in range(500):\n            d[key]\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "example_benchmarks.TimeSuite.time_range",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "72a6802b5ba2270cc4af88ddbd67e3c44fe4f4c8b292257438a394167fbb158b",
        "warmup_time": -1
    },
    "example_benchmarks.TimeSuite.time_values": {
        "code": "class TimeSuite:\n    def time_values(self):\n        for value in self.d.values():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "example_benchmarks.TimeSuite.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cace9f2d006aa364dcf5762823afba3680c2fb50179ee30beaf880c0697256e2",
        "warmup_time": -1
    },
    "importing.timeraw_import_porepy": {
        "code": "def timeraw_import_porepy():\n    return \"\"\"\n    import porepy\n    \"\"\"",
        "min_run_count": 2,
        "name": "importing.timeraw_import_porepy",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "79952afc58d04b087f87d31faaf6d96df9f64cb910d5bcce62dbdaec3fc66174",
        "warmup_time": -1
    },
    "poromechanics_geo0_grid1.PreSolve.time_pre_solve": {
        "code": "class PreSolve:\n    def time_pre_solve(self):\n        self.model.before_nonlinear_loop()\n        self.model.before_nonlinear_iteration()\n        self.model.assemble_linear_system()\n\n    def setup(self):\n        self.model = make_model()\n        self.model.prepare_simulation()",
        "min_run_count": 2,
        "name": "poromechanics_geo0_grid1.PreSolve.time_pre_solve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b7eff999970ac8878bbdd875a0d65fb9ea3311ad8f48267c71414f4b53f35a7c",
        "warmup_time": -1
    },
    "poromechanics_geo0_grid1.PrepareSimulation.time_prepare_simulation": {
        "code": "class PrepareSimulation:\n    def time_prepare_simulation(self):\n        self.model.prepare_simulation()\n\n    def setup(self):\n        self.model = make_model()",
        "min_run_count": 2,
        "name": "poromechanics_geo0_grid1.PrepareSimulation.time_prepare_simulation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cac381fb18c1a2c3ebbe36a63fd5cde3ce8c014f334de09f048ba6d2f1f472db",
        "warmup_time": -1
    },
    "poromechanics_geo0_grid1.Solve.time_solve": {
        "code": "class Solve:\n    def time_solve(self):\n        self.model.solve_linear_system()\n\n    def setup(self):\n        self.model = make_model()\n        self.model.prepare_simulation()\n        self.model.before_nonlinear_loop()\n        self.model.before_nonlinear_iteration()\n        self.model.assemble_linear_system()",
        "min_run_count": 2,
        "name": "poromechanics_geo0_grid1.Solve.time_solve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fc741e4e36771bc57e67458e989d1acb1031749708fe1f31d120df65e2e420a7",
        "warmup_time": -1
    },
    "single_phase_flow_geo0_grid1.PreSolve.time_pre_solve": {
        "code": "class PreSolve:\n    def time_pre_solve(self):\n        self.model.before_nonlinear_loop()\n        self.model.before_nonlinear_iteration()\n        self.model.assemble_linear_system()\n\n    def setup(self):\n        self.model = make_model()\n        self.model.prepare_simulation()",
        "min_run_count": 2,
        "name": "single_phase_flow_geo0_grid1.PreSolve.time_pre_solve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 5,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b7eff999970ac8878bbdd875a0d65fb9ea3311ad8f48267c71414f4b53f35a7c",
        "warmup_time": -1
    },
    "single_phase_flow_geo0_grid1.PrepareSimulation.time_prepare_simulation": {
        "code": "class PrepareSimulation:\n    def time_prepare_simulation(self):\n        self.model.prepare_simulation()\n\n    def setup(self):\n        self.model = make_model()",
        "min_run_count": 2,
        "name": "single_phase_flow_geo0_grid1.PrepareSimulation.time_prepare_simulation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 5,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cac381fb18c1a2c3ebbe36a63fd5cde3ce8c014f334de09f048ba6d2f1f472db",
        "warmup_time": -1
    },
    "single_phase_flow_geo0_grid1.Solve.time_solve": {
        "code": "class Solve:\n    def time_solve(self):\n        self.model.solve_linear_system()\n\n    def setup(self):\n        self.model = make_model()\n        self.model.prepare_simulation()\n        self.model.before_nonlinear_loop()\n        self.model.before_nonlinear_iteration()\n        self.model.assemble_linear_system()",
        "min_run_count": 2,
        "name": "single_phase_flow_geo0_grid1.Solve.time_solve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 5,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fc741e4e36771bc57e67458e989d1acb1031749708fe1f31d120df65e2e420a7",
        "warmup_time": -1
    },
    "version": 2
}